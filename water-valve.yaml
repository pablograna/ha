
esphome:

  name: water-valve
  friendly_name: Water Valve
  min_version: 2024.11.0
  name_add_mac_suffix: true

  on_boot:
    priority: -100
    then:
      - valve.close: water_valve

esp8266:

  board: esp01_1m
  restore_from_flash: True

preferences:

  flash_write_interval: 0min

# Enable logging.
logger:

  level: DEBUG

  logs:
    text_sensor: ERROR

# Enable Home Assistant API.
api:

# Allow Over-The-Air updates.
ota:

- platform: esphome

wifi:

  # The address to use in ESPHome home assistant extension.
  use_address: 192.168.87.105

  # Enable fallback hotspot (captive portal) when reseting the valve.
  ap:
    ap_timeout: 0s

# Ask for the wifi credentials after reset.
captive_portal:

web_server:

  port: 80
  ota: false

# Obtain the time from an sntp server.
time:

  - platform: sntp
    id: current_time
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time:
      - seconds: 0/1
        then:
          - script.execute: check_run

text_sensor:

  # Shows the current internal time as obtained from NTP.
  - platform: template
    name: "Current time"
    lambda: |-
      char str[20];
      time_t currTime = id(current_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      return  { str };
    update_interval: 1s

datetime:

  # Start time of watering.
  - platform: template
    id: start_time
    type: time
    name: " 8- Start at"
    optimistic: yes
    initial_value: "04:00"
    restore_value: true

script:

  # Checks if it is time to start watering. Executed by current_time
  # component every minute.
  - id: check_run
    then:
      lambda: |-
          int dow = id(current_time).now().day_of_week;
          int current_hour = id(current_time).now().hour;
          int current_minute = id(current_time).now().minute;
          int current_second = id(current_time).now().second;
          int start_hour = id(start_time).hour;
          int start_minute = id(start_time).minute;
          int start_second = id(start_time).second;
          if (((dow == 1 && id(sunday_on).state == true)
          ||   (dow == 2 && id(monday_on).state == true)
          ||   (dow == 3 && id(tuesday_on).state == true)
          ||   (dow == 4 && id(wednesday_on).state == true)
          ||   (dow == 5 && id(thursday_on).state == true)
          ||   (dow == 6 && id(friday_on).state == true)
          ||   (dow == 7 && id(saturday_on).state == true))
          &&  (current_hour == start_hour
            && current_minute == start_minute
            && current_second == start_second
            )) {
            id(water_start).execute();
          }

  # Starts watering and stops after the delay specified in the duration
  # component.
  - id: water_start
    mode: restart
    then:
      - script.stop: water_stop
      - valve.open: water_valve
      - delay: !lambda |-
          return id(duration).state * 60 * 1000;
      - valve.close: water_valve

  # Stops watering after the delay specified in the duration component,
  # or immediately if stop_immediately is true.
  - id: water_stop
    mode: restart
    parameters:
      stop_immediately: bool
    then:
      - script.stop: water_start
      - delay: !lambda |-
          if (stop_immediately) {
            return 0;
          } else {
            return id(duration).state * 60 * 1000;
          }
      - valve.close: water_valve

valve:

  # The water valve.
  - platform: template
    id: water_valve
    name: "10- Water Valve"
    open_action:
      - switch.turn_on: relay
      - light.turn_on: opened_led
      - lambda: |-
              id(water_stop)->execute(false);
    close_action:
      - switch.turn_off: relay
      - light.turn_off: opened_led
    optimistic: true
    restore_mode: RESTORE

switch:

  # A switch for every day of the week that needs watering.
  - platform: template
    id: sunday_on
    name: " 1-Sunday"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: monday_on
    name: " 2-Monday"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: tuesday_on
    name: " 3-Tuesday"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: wednesday_on
    name: " 4-Wednesday"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: thursday_on
    name: " 5-Thursday"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: friday_on
    name: " 6-Friday"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: saturday_on
    name: " 7-Saturday"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: factory_reset
    id: factory_reset_switch
    name: "Factory reset"
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF

  # Switch to control the valve relay. 0 close, 3v open.
  - platform: gpio
    id: relay
    name: "Valve Relay"
    pin:
      number: GPIO13
      inverted: false
      mode:
        output: True
    internal: true

number:

  # Number of minutes to run, from 1 minute to 1 hour.
  - platform: template
    id: duration
    name: " 9- Duration (min)"
    min_value: 1
    max_value: 60
    step: 1
    initial_value: 1
    optimistic: True
    restore_value: True

binary_sensor:

  # Open/closed button. 3.3v normal, pressed 0v.
  - platform: gpio
    id: button
    name: Button
    internal: true
    pin:
      number: GPIO12
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      # Small filter, to debounce the button press.
      - delayed_on_off: 25ms
    on_multi_click:
      # Toggle water valve.
      - timing:
          - ON for at most 1s
          - OFF for at least 30ms
        invalid_cooldown: 1ms
        then:
         - lambda: |
             if (id(water_valve).position == VALVE_OPEN) {
               // Close the valve.
                id(water_stop)->execute(true);
              } else {
                id(water_start)->execute();
              }
      # Factory reset after 10s of button press.
      - timing:
          - ON for at least 10s
          - OFF for at least 30ms
        invalid_cooldown: 1ms
        then:
          - switch.turn_on: factory_reset_switch

# Internal led, on when the valve is open.
light:
  - platform: binary
    name: "Open indicator led"
    output: onboard_led
    id: opened_led
    internal: true

output:
  - platform: gpio
    id: onboard_led
    pin:
      number: GPIO2
      mode:
        output: True
      inverted: True
